{
  "paragraphs": [
    {
      "text": "%md\n\n# Union two aggregated subresults\n\n* Work with the answers dataset\n* For each question compute how many answers it has\n* For each question compute the sum of the answer\u0027s score\n* Combine these subresults into one final output using Union\n* The output should have three cols: question_id, metricValue, metricName (which is either sum or count)\n* Check the final plan and see if it is optimal\n* Try to optimize if possible",
      "user": "anonymous",
      "dateUpdated": "2019-12-07 15:29:25.445",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eUnion two aggregated subresults\u003c/h1\u003e\n\u003cul\u003e\n  \u003cli\u003eWork with the answers dataset\u003c/li\u003e\n  \u003cli\u003eFor each question compute how many answers it has\u003c/li\u003e\n  \u003cli\u003eFor each question compute the sum of the answer\u0026rsquo;s score\u003c/li\u003e\n  \u003cli\u003eCombine these subresults into one final output using Union\u003c/li\u003e\n  \u003cli\u003eThe output should have three cols: question_id, metricValue, metricName (which is either sum or count)\u003c/li\u003e\n  \u003cli\u003eCheck the final plan and see if it is optimal\u003c/li\u003e\n  \u003cli\u003eTry to optimize if possible\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1575703214225_871988558",
      "id": "20191207-082014_1752733988",
      "dateCreated": "2019-12-07 08:20:14.225",
      "dateStarted": "2019-12-07 15:29:25.445",
      "dateFinished": "2019-12-07 15:29:25.454",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val answersDF \u003d spark.table(\"answers\")",
      "user": "anonymous",
      "dateUpdated": "2019-12-07 08:44:12.712",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1575703242085_1854181687",
      "id": "20191207-082042_64513190",
      "dateCreated": "2019-12-07 08:20:42.085",
      "dateStarted": "2019-12-07 08:44:12.730",
      "dateFinished": "2019-12-07 08:44:12.907",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// Standard way:\n\nval dfSum \u003d answersDF\n  .groupBy(\"question_id\")\n  .agg(\n    sum(\"score\").alias(\"metricValue\")\n  )\n  .withColumn(\"metricName\", lit(\"sum\"))\n\n\nval dfCount \u003d answersDF\n  .groupBy(\"question_id\")\n  .agg(\n    count(\"score\").alias(\"metricValue\")\n  )\n  .withColumn(\"metricName\", lit(\"count\"))\n\nval resultDF \u003d dfSum.union(dfCount)\nresultDF.collect()",
      "user": "anonymous",
      "dateUpdated": "2019-12-07 08:44:12.933",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1575703260022_178654171",
      "id": "20191207-082100_629489903",
      "dateCreated": "2019-12-07 08:21:00.022",
      "dateStarted": "2019-12-07 08:44:12.942",
      "dateFinished": "2019-12-07 08:44:14.975",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// Or in refactored way:\n\nval dfCommon \u003d answersDF\n  .groupBy(\"question_id\")\n\n\nval dfSum \u003d dfCommon\n  .agg(\n    sum(\"score\").alias(\"metricValue\")\n  )\n  .withColumn(\"metricName\", lit(\"sum\"))\n\n\nval dfCount \u003d dfCommon\n  .agg(\n    count(\"score\").alias(\"metricValue\")\n  )\n  .withColumn(\"metricName\", lit(\"count\"))\n\nval resultDF \u003d dfSum.union(dfCount)\nresultDF.collect()",
      "user": "anonymous",
      "dateUpdated": "2019-12-07 08:44:14.980",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1575703715200_-476987233",
      "id": "20191207-082835_1397968931",
      "dateCreated": "2019-12-07 08:28:35.200",
      "dateStarted": "2019-12-07 08:44:14.994",
      "dateFinished": "2019-12-07 08:44:16.785",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// Optimized:\n// Add repartition\n// Check the query plan - the Exchange is reused now\n\nval dfSum \u003d answersDF\n  .repartition($\"question_id\")\n  .groupBy(\"question_id\")\n  .agg(\n    sum(\"score\").alias(\"metricValue\")\n  )\n  .withColumn(\"metricName\", lit(\"sum\"))\n\nval dfCount \u003d answersDF\n  .repartition($\"question_id\")\n  .groupBy(\"question_id\")\n  .agg(\n    count(\"score\").alias(\"metricValue\")\n  )\n  .withColumn(\"metricName\", lit(\"count\"))\n\nval resultDF \u003d dfSum.union(dfCount)\nresultDF.collect()",
      "user": "anonymous",
      "dateUpdated": "2019-12-07 08:44:16.820",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1575703840568_-1253239805",
      "id": "20191207-083040_1640582337",
      "dateCreated": "2019-12-07 08:30:40.568",
      "dateStarted": "2019-12-07 08:44:16.831",
      "dateFinished": "2019-12-07 08:44:18.543",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// optimized \u0026 refactored:\n\nval dfCommon \u003d answersDF\n  .repartition($\"question_id\")\n  .groupBy(\"question_id\")\n\n\nval dfSum \u003d dfCommon\n  .agg(\n    sum(\"score\").alias(\"metricValue\")\n  )\n  .withColumn(\"metricName\", lit(\"sum\"))\n\n\nval dfCount \u003d dfCommon\n  .agg(\n    count(\"score\").alias(\"metricValue\")\n  )\n  .withColumn(\"metricName\", lit(\"count\"))\n\nval resultDF \u003d dfSum.union(dfCount)\nresultDF.collect()",
      "user": "anonymous",
      "dateUpdated": "2019-12-07 08:44:18.565",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1575704367374_351827105",
      "id": "20191207-083927_780735162",
      "dateCreated": "2019-12-07 08:39:27.374",
      "dateStarted": "2019-12-07 08:44:18.576",
      "dateFinished": "2019-12-07 08:44:20.298",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### What is the cost of this optimization?\n\nWhen do we use it?\n\n* We shuffle the whole dataset but we do only one shuffle write (there still will be two shuffle reads)\n* So long as this one shuffle is faster than two originals, this technique is prefered",
      "user": "anonymous",
      "dateUpdated": "2019-12-07 15:28:11.685",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eWhat is the cost of this optimization?\u003c/h3\u003e\n\u003cp\u003eWhen do we use it?\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eWe shuffle the whole dataset but we do only one shuffle write (there still will be two shuffle reads)\u003c/li\u003e\n  \u003cli\u003eSo long as this one shuffle is faster than two originals, this technique is prefered\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1575704525144_1690982374",
      "id": "20191207-084205_731103105",
      "dateCreated": "2019-12-07 08:42:05.144",
      "dateStarted": "2019-12-07 15:28:11.685",
      "dateFinished": "2019-12-07 15:28:11.689",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "",
      "user": "anonymous",
      "dateUpdated": "2019-12-07 15:28:25.584",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1575728891677_1067733573",
      "id": "20191207-152811_1792193868",
      "dateCreated": "2019-12-07 15:28:11.677",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "solutions/physical-planning/physical-plans-III",
  "id": "2EUXJ9ZYV",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "md:shared_process": [],
    "spark:shared_process": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}