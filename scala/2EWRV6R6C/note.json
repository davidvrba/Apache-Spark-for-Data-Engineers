{
  "paragraphs": [
    {
      "text": "%md\n\n# Union two aggregated subresults\n\n* Work with the answers dataset\n* For each question compute how many answers it has\n* For each question compute the sum of the answer\u0027s score\n* Combine these subresults into one final output using Union\n* The output should have three cols: question_id, metricValue, metricName (which is either sum or count)\n* Check the final plan and see if it is optimal\n* Try to optimize if possible (what is the cost of the optimization?)",
      "user": "anonymous",
      "dateUpdated": "2019-12-07 15:31:53.335",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eUnion two aggregated subresults\u003c/h1\u003e\n\u003cul\u003e\n  \u003cli\u003eWork with the answers dataset\u003c/li\u003e\n  \u003cli\u003eFor each question compute how many answers it has\u003c/li\u003e\n  \u003cli\u003eFor each question compute the sum of the answer\u0026rsquo;s score\u003c/li\u003e\n  \u003cli\u003eCombine these subresults into one final output using Union\u003c/li\u003e\n  \u003cli\u003eThe output should have three cols: question_id, metricValue, metricName (which is either sum or count)\u003c/li\u003e\n  \u003cli\u003eCheck the final plan and see if it is optimal\u003c/li\u003e\n  \u003cli\u003eTry to optimize if possible (what is the cost of the optimization?)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1575728996709_2064307688",
      "id": "20191207-082014_1752733988",
      "dateCreated": "2019-12-07 15:29:56.709",
      "dateStarted": "2019-12-07 15:31:53.335",
      "dateFinished": "2019-12-07 15:31:53.340",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val answersDF \u003d spark.table(\"answers\")",
      "user": "anonymous",
      "dateUpdated": "2019-12-07 15:29:56.710",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1575728996710_481136436",
      "id": "20191207-082042_64513190",
      "dateCreated": "2019-12-07 15:29:56.710",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// Standard way:\n// Check the query plan\n\nval dfSum \u003d answersDF\n  .groupBy(\"question_id\")\n  .agg(\n    sum(\"score\").alias(\"metricValue\")\n  )\n  .withColumn(\"metricName\", lit(\"sum\"))\n\n\nval dfCount \u003d answersDF\n  .groupBy(\"question_id\")\n  .agg(\n    count(\"score\").alias(\"metricValue\")\n  )\n  .withColumn(\"metricName\", lit(\"count\"))\n\nval resultDF \u003d dfSum.union(dfCount)\nresultDF.collect()",
      "user": "anonymous",
      "dateUpdated": "2019-12-07 15:30:54.440",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1575728996710_-840249994",
      "id": "20191207-082100_629489903",
      "dateCreated": "2019-12-07 15:29:56.710",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// Optimized:",
      "user": "anonymous",
      "dateUpdated": "2019-12-07 15:30:41.258",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1575728996710_-1126422114",
      "id": "20191207-083040_1640582337",
      "dateCreated": "2019-12-07 15:29:56.710",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "",
      "user": "anonymous",
      "dateUpdated": "2019-12-07 15:29:56.711",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1575728996711_85424314",
      "id": "20191207-152811_1792193868",
      "dateCreated": "2019-12-07 15:29:56.711",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "assignments/physical-planning/physical-plans-III",
  "id": "2EWRV6R6C",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "md:shared_process": [],
    "spark:shared_process": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}